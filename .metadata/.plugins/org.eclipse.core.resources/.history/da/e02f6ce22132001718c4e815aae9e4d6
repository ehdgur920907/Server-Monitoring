package com.monitoring.controller;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Locale;

import org.apache.ibatis.session.SqlSession;
import org.json.simple.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.monitoring.dto.BasicInformationDto;
import com.monitoring.dto.ServerInformationDto;
import com.monitoring.mapper.Mapper;

@Controller
public class MonitoringController {
	@Autowired
	private SqlSession sqlSession;

	@RequestMapping("/monitoring/{id}")
	public String getMonitoring(Locale locale, Model model, @PathVariable String id) {
		Mapper mapper = sqlSession.getMapper(Mapper.class);
		BasicInformationDto basicInformationDto = mapper.selectBasicInformation(id)
				.get(mapper.selectBasicInformation(id).size() - 1);
		ServerInformationDto serverInformationDto = mapper.selectServerInformation(id);

		basicInformationDto.setRegisterDate(basicInformationDto.getRegisterDate().substring(0, 19));

		model.addAttribute("basicInformation", basicInformationDto);
		model.addAttribute("serverInformation", serverInformationDto);
		return "monitoring";
	}
	
	@RequestMapping("/monitoring")
	@ResponseBody
	public String timeAndStatus(Model model) {
		// System.out.println("ajax");
		Mapper mapper = sqlSession.getMapper(Mapper.class);
		ArrayList<ServerInformationDto> arrayListServerInformation = new ArrayList<ServerInformationDto>();
		HashMap<String, String> hashMap = new HashMap<String, String>();
		
		for (int i = 0; i < mapper.selectServerInformationList().size(); i++) {
			arrayListServerInformation.add(mapper.selectServerInformationList().get(i));
			
			if (arrayListServerInformation.get(i).getStatus().equals("warning")) {
				hashMap.put("status", "warning");
				hashMap.put("time", LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));
				// System.out.println(hashMap);
			} else if (arrayListServerInformation.get(i).getStatus().equals("danger")) {
				hashMap.put("status", "danger");
				hashMap.put("time", LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));
				// System.out.println(hashMap);
			} else {
				hashMap.put("status", "normal");
				hashMap.put("time", LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));
				// System.out.println(hashMap);
			}
		}
		JSONObject jsonObject = new JSONObject();
		String jsonString = "";
		jsonString = jsonObject.toJSONString(hashMap);
		return jsonString;
	}
}
