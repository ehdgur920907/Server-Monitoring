function realtimeClock() {
    $('#time').text(getTimeStamp());
    setTimeout("realtimeClock()", 1000);
}

function getTimeStamp() {
    var d = new Date();

    var s = leadingZeros(d.getFullYear(), 4) + '-' +
        leadingZeros(d.getMonth() + 1, 2) + '-' +
        leadingZeros(d.getDate(), 2) + ' / ' +

        leadingZeros(d.getHours(), 2) + ':' +
        leadingZeros(d.getMinutes(), 2) + ':' +
        leadingZeros(d.getSeconds(), 2);

    return s;
}

function leadingZeros(n, digits) {
    var zero = '';
    n = n.toString();

    if (n.length < digits) {
        for (i = 0; i < digits - n.length; i++) {
            zero += '0';
        }
    }
    return zero + n;
}

var url = location.href;
var id = url.substring(url.lastIndexOf('/') + 1);

window.chartColors = {
    blue: "rgb(54, 162, 235)",
    green: "rgb(75, 192, 192)",
    grey: "rgb(201, 203, 207)",
    orange: "rgb(255, 159, 64)",
    purple: "rgb(153, 102, 255)",
    red: "rgb(255, 99, 132)",
    yellow: "rgb(255, 205, 86)"
};

var randomScalingFactor = function() {
    return Math.round(Math.random() * 100);
};

function getRandomData() {
    return {
        totalDisk: Math.round(Math.random() * 100),
        usedDisk: Math.round(Math.random() * 100),
        freeDisk: Math.round(Math.random() * 100),
        totalDisk: Math.round(Math.random() * 100),
        usedMemory: Math.round(Math.random() * 100),
        freeMemory: Math.round(Math.random() * 100),
        usedMemory: Math.round(Math.random() * 100),
        totalCpu: Math.round(Math.random() * 100),
        userCpu: Math.round(Math.random() * 100),
        systemCpu: Math.round(Math.random() * 100),
        idleCpu: Math.round(Math.random() * 100)
    }
}

function doughnutChart() {
    this.ctx;
    this.config;
    this.update;
    this.chart;
    this.init;
};

doughnutChart.prototype.init = function(canvasName) {
    this.ctx = document.getElementById(canvasName).getContext("2d");
    this.chart = new Chart(this.ctx, this.config);
    console.log(canvasName + "init")
}

var cpuChart = new doughnutChart();
cpuChart.config = {
    type: 'doughnut',
    data: {
        datasets: [{
            data: [
                getRandomData().userCpu,
                getRandomData().systemCpu,
                getRandomData().idleCpu
            ],
            backgroundColor: [
                window.chartColors.red,
                window.chartColors.orange
            ],
            label: 'cpu'
        }],
        labels: [
            "user cpu",
            "system cpu",
            "idle cpu"
        ]
    }
};

cpuChart.update = function(data) {
    this.config.data.datasets[0].data[0] = data.userCpu;
    this.config.data.datasets[0].data[1] = data.systemCpu;
    this.config.data.datasets[0].data[2] = data.idleCpu;

    this.chart.update();
}

var memoryChart = new doughnutChart();
memoryChart.config = {
    type: 'doughnut',
    data: {
        datasets: [{
            data: [
                getRandomData().usedMemory,
                getRandomData().freeMemory
            ],
            backgroundColor: [
                window.chartColors.red,
                window.chartColors.orange
            ],
            label: 'memory'
        }],
        labels: [
            "used memory",
            "free memory"
        ]
    }
};

memoryChart.update = function(data) {
    this.config.data.datasets[0].data[0] = data.usedMemory;
    this.config.data.datasets[0].data[1] = data.freeMemory;

    this.chart.update();
}

var diskChart = new doughnutChart();
diskChart.config = {
    type: 'doughnut',
    data: {
        datasets: [{
            data: [
                getRandomData().usedDisk,
                getRandomData().freeDisk
            ],
            backgroundColor: [
                window.chartColors.red,
                window.chartColors.orange
            ],
            label: 'Disk Status'
        }],
        labels: [
            "used disk",
            "free disk"
        ]
    }
};

diskChart.update = function(data) {
    this.config.data.datasets[0].data[0] = data.usedDisk;
    this.config.data.datasets[0].data[1] = data.freeDisk;

    this.chart.update();
}


$(document).ready(function() {
    diskChart.init("diskChartDoughnut");
    memoryChart.init("memoryChartDoughnut");
    cpuChart.init("cpuChartDoughnut");

    setInterval(function() {
        $.ajax({
            type: 'GET',
            url: '/monitoring/detail',
            data: {
                "id": id
            },
            success: function(res) {
                var data = JSON.parse(res);

                data.totalCpu = data.totalCpu.slice(0,-1);
                data.userCpu = data.userCpu.slice(0,-1);
                data.idleCpu = data.idleCpu.slice(0,-1);
                data.systemCpu = data.systemCpu.slice(0,-1);

                diskChart.update(data);
                cpuChart.update(data);
                memoryChart.update(data);
            },
            error: function(err) {
                console.log('cannot receive status model.');
            }
        });
    }, 2000);

});
